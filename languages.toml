[[language]]
name = "go"
auto-format = true
formatter = { command = "goimports" }

[language-server.sql-language-server]
command = "sql-language-server"
args = ["up", "--method", "stdio"]

[[language]]
name = "sql"
language-servers = [ "sql-language-server" ]

[language-server.yaml-language-server.config.yaml]
format = { enable = true }
validation = true
auto-format = true
formatter = { command = "prettier", args = ["--parser", "yaml"] }

[language-server.yaml-language-server.config.yaml.schemas]
"https://json.schemastore.org/github-workflow.json" = ".github/workflows/*.{yml,yaml}"
"https://raw.githubusercontent.com/ansible-community/schemas/main/f/ansible-tasks.json" = "roles/{tasks,handlers}/*.{yml,yaml}"

# HTML, css, js, ts
[[language]]
name = "html"
scope="source.html"
auto-format = true
formatter = { command = "prettier", args = ["--parser", "html"] }
file-types = ["html"]
language-servers = [ "vscode-html-language-server"]

[[language]]
name = "css"
auto-format = true
formatter = { command = "prettier", args = ["--parser", "css"] }
scope = "source.css"
file-types=["css"]
language-servers = [ "vscode-css-language-server" ]

[[language]]
name = "json"
auto-format = true
formatter = { command = "prettier", args = ["--parser", "jsonc"] }
scope = "source.json"
file-types = ["json"]
language-servers = [ "vscode-json-language-server" ]

[language-server.pbls]
command = "pbls"

[[language]]
name = "protobuf"
language-servers = ['pbls']

[language-server.tailwindcss-ls]
command = "tailwindcss-language-server"
args = ["--stdio"]

[[language]]
name = "html"
language-servers = [ "vscode-html-language-server" ] # , "tailwindcss-ls" ]

[[language]]
name = "css"
language-servers = [ "vscode-css-language-server" ] # , "tailwindcss-ls" ]

[[language]]
name = "jsx"
language-servers = [ "typescript-language-server" ] # , "tailwindcss-ls" ]

[[language]]
name = "tsx"
language-servers = [ "typescript-language-server" ] # , "tailwindcss-ls" ]

[[language]]
name = "svelte"
language-servers = [ "svelteserver" ] # , "tailwindcss-ls" ]
auto-format = true
formatter = { command = "prettier", args = ["--parser", "typescript"] }

[[language]]
name = "js"
scope = "source.js"
auto-format = true
formatter = { command = "prettier", args = ["--parser", "typescript"] }
file-types = ["js"]
language-servers = [
  "typescript-language-server", # optional
  "vscode-eslint-language-server",
]

[[language]]
name = "toml"
formatter = { command = "taplo", args = ["fmt", "-"] }

[[language]]
name = "ts"
scope = "source.ts"
auto-format = true
formatter = { command = "prettier", args = ["--parser", "typescript"] }
file-types = ["ts", "jsx", "tsx"]
language-servers = [ "typescript-language-server" ]

# python using ruff, pyright and black

# [[language]]
# name = "python"
# language-servers = [ "pyright", "ruff" ]

# [language-server.pyright.config.python.analysis]
# typeCheckingMode = "basic"

# [language-server.ruff]
# command = "ruff-lsp"

# [language-server.ruff.config.settings]
# args = ["--ignore", "E501"]

# [language.formatter]
# command = "black"
# args = ["--line-length", "125", "--quiet", "-"]

# python using pylsp and mypy

[language-server.ruff]
command = "ruff"
args = ["server", "-q", "--preview"]

[[language]]
name = "python"
scope = "source.python"
injection-regex = "python"
file-types = ["py", "pyi", "py3", "pyw", "ptl", "rpy", "cpy", "ipy", "pyt", { glob = ".python_history" }, { glob = ".pythonstartup" }, { glob = ".pythonrc" }, { glob = "SConstruct" }, { glob = "SConscript" }]
shebangs = ["python"]
roots = ["pyproject.toml", "setup.py", "poetry.lock", "pyrightconfig.json", "requirements.txt", ".venv/"]
comment-token = "#"
language-servers = [
  # {name = "pyright", except-features=["diagnostics"]},
  "basedpyright",
  "ruff",
  # "pylsp"
]
indent = { tab-width = 4, unit = "    " }
auto-format = true
formatter = { command = "ruff" }
# formatter =  { command = "bash", args = ["-c", "ruff format --line-length 80 -q . && black --line-length 80 -q -"] }

[language.debugger]
name = "debugpy"
transport = "stdio"
command = "python3"
args = ["-m",  "debugpy.adapter"]

[[language.debugger.templates]]
name = "source"
request = "launch"
completion = [ { name = "entrypoint", completion = "filename", default = "." } ]
args = { mode = "debug", program = "{0}" }
